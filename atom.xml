<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老胡随手记</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://foxgem.github.io/"/>
  <updated>2016-05-28T11:31:48.000Z</updated>
  <id>http://foxgem.github.io/</id>
  
  <author>
    <name>胡键（jianhgreat@hotmail.com）</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>To Do List + Break List = 劳逸结合</title>
    <link href="http://foxgem.github.io/2016/05/28/break-list/"/>
    <id>http://foxgem.github.io/2016/05/28/break-list/</id>
    <published>2016-05-28T10:53:05.000Z</published>
    <updated>2016-05-28T11:31:48.000Z</updated>
    
    <content type="html">&lt;p&gt;关于&lt;a href=&quot;https://en.wikipedia.org/wiki/Getting_Things_Done&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GTD&lt;/a&gt;的文章永远不会嫌太多，这是&lt;a href=&quot;http://lifehacker.com/swap-your-to-do-list-for-a-break-list-to-get-more-don-1774565496&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;另一篇发布在LifeHacker上的同类题材的文章&lt;/a&gt;。与那些专注于“如何完成任务的学问”的文章不同，它介绍的是工作的另一面：如何休息的艺术。&lt;/p&gt;
&lt;p&gt;就其整体思想而言，跟番茄工作法有几许相似：都主张工作和休息相结合，避免过渡操劳；不同于采用结构化“工作-休息”循环的番茄工作法，这篇文章介绍的劳逸结合方式颇为随意：列出一个跟To Do List并列的Break List，每次休息完，就划掉一项。至于什么时候休息，it’s up to you！Break List和To Do List的关系就像阴和阳一样，既对立，又统一。&lt;/p&gt;
&lt;p&gt;我很喜欢这篇文章表达的一个观点：过犹不及，不论是工作还是休息，都需要管理。过渡工作，身体吃不消；过渡休息，事情就被耽误。&lt;/p&gt;
&lt;p&gt;同时，对于这种由你自己（而不是番茄钟）说了算的劳逸结合方式，我个人觉得可操作性更强一些。毕竟，你很难要求跟你一起工作的人完全按照你的（番茄）工作节奏来，除非工作环境具备这一要求。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;关于&lt;a href=&quot;https://en.wikipedia.org/wiki/Getting_Things_Done&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GTD&lt;/a&gt;的文章永远不会嫌太多，这是&lt;a href=&quot;http://lifehack
    
    </summary>
    
    
      <category term="阅读" scheme="http://foxgem.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>2016年最受欢迎的前100 Java开发库</title>
    <link href="http://foxgem.github.io/2016/05/27/top-100-java-libs-in-2016/"/>
    <id>http://foxgem.github.io/2016/05/27/top-100-java-libs-in-2016/</id>
    <published>2016-05-27T12:26:55.000Z</published>
    <updated>2016-05-27T13:08:21.000Z</updated>
    
    <content type="html">&lt;p&gt;说实话，文章有点标题党的味道，:)。按照&lt;a href=&quot;https://dzone.com/articles/the-top-100-java-libraries-in-2016-after-analyzing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;解释的数据获取方法，更准确的说法应该是“GitHub 2016年最受欢迎的Top 100 Java libs”。不过鉴于GitHub在开发界的地位，标题写成这样也不算太过分。&lt;/p&gt;
&lt;p&gt;根据这些数据做出的图表，很容易看出来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试类工具比重不少，是否可以得出结论自动化测试已经深入人心？&lt;/li&gt;
&lt;li&gt;JUnit和Spring在Java生态中的地位依旧牢不可破&lt;/li&gt;
&lt;li&gt;日志大部分采用的是slf4j + slf4j-log12&lt;/li&gt;
&lt;li&gt;用Java做游戏的真不多，比起用它来做Web的差远了&lt;/li&gt;
&lt;li&gt;Parsing类的工具比重虽大，但其实多是用于对JSON和XML的解析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最有趣的是，JVM上的动态语言&lt;a href=&quot;http://www.groovy-lang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Groovy&lt;/a&gt;也被纳入在内，作为Java库（org.codehaus.groovy.groovy-all）。作为一个资深Groovy用户，我可以负责任地说，自从用上Groovy，省掉了很多工具选择的烦恼，如JSON和XML的解析。&lt;/p&gt;
&lt;p&gt;而且，我也很高兴的看到Groovy的流行度逐年上升，并于2016年5月TIOBE的语言榜中排第17位。套句广告词：Groovy，谁用谁知道！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;说实话，文章有点标题党的味道，:)。按照&lt;a href=&quot;https://dzone.com/articles/the-top-100-java-libraries-in-2016-after-analyzing&quot; target=&quot;_blank&quot; rel=&quot;external
    
    </summary>
    
    
      <category term="开发" scheme="http://foxgem.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Vert.x技巧：使用EventBus Interceptor拦截消息</title>
    <link href="http://foxgem.github.io/2016/05/26/vertx-eventbus-interceptor/"/>
    <id>http://foxgem.github.io/2016/05/26/vertx-eventbus-interceptor/</id>
    <published>2016-05-26T10:58:38.000Z</published>
    <updated>2016-05-26T11:17:12.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://vertx.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vert.x&lt;/a&gt;用久了肯定有这样的想法：拦截EventBus上发送的所有消息。这个需求用Vertx EventBus Interceptor可以非常简单的实现，可惜的是，&lt;a href=&quot;http://vertx.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vert.x文档&lt;/a&gt;却并没有明确的指出来。&lt;/p&gt;
&lt;p&gt;其实它的使用很简单，直接看代码吧（Groovy代码）：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vertx.eventBus().addInterceptor &amp;#123; sendContext -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Message message = sendContext.message()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 自由发挥……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sendContext.next()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后的那句 &lt;strong&gt;sendContext.next()&lt;/strong&gt; 非常关键：如果没写，后续的consumer将无法收到刚刚被你拦截的消息！所以，一定要确保你是&lt;strong&gt;有意&lt;/strong&gt;不写的。&lt;/p&gt;
&lt;p&gt;其他的就没什么可说得了，基本跟其他工具提供的拦截器的功能类似，查查API文档，看看代码，都能搞清楚。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://vertx.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vert.x&lt;/a&gt;用久了肯定有这样的想法：拦截EventBus上发送的所有消息。这个需求用Vertx EventBus Interceptor可以非常简单的
    
    </summary>
    
    
      <category term="开发" scheme="http://foxgem.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>贫富差距为何会越来越大？</title>
    <link href="http://foxgem.github.io/2016/05/25/rich-and-poor/"/>
    <id>http://foxgem.github.io/2016/05/25/rich-and-poor/</id>
    <published>2016-05-25T12:30:26.000Z</published>
    <updated>2016-05-25T13:10:17.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://getpocket.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pocket&lt;/a&gt;今天给我推荐了&lt;a href=&quot;http://www.vox.com/2016/5/23/11704246/wealth-inequality-cartoon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇解释贫富差距缘何越来越大的漫画&lt;/a&gt;，当然，考察对象是美帝。&lt;/p&gt;
&lt;p&gt;作为IT男，我对于这部分知识的薄弱是可想而知的，本着谦虚好学兼工作之余消遣的想法，这篇文章成了饭后的阅读。粗粗看完之后，形成了下面的认识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;富人赚钱主要靠投资【另一句经常听到的话就是：你不理财，财不理你】&lt;/li&gt;
&lt;li&gt;工会能帮助工人赚的更多，反之亦然。&lt;/li&gt;
&lt;li&gt;教育水平决定工资水平，即：博士 &amp;gt; 硕士 &amp;gt; 学士 &amp;gt; 高中。原因在于：技术进步减少了体力劳动的相应岗位，脑力劳动会越来越吃香。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，文中还提出了其他原因，如税率政策和部分人工资的待遇变化，但以上三点是给我印象最深的。此外，文中提到关于收入不平等的最大危害在于：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But perhaps the best argument against income inequality, though, is that it’s a threat to democracy. If a few people control most of the money, then they can control political outcomes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于这一点，作为拥有5000年历史我们，应该不难理解吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://getpocket.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pocket&lt;/a&gt;今天给我推荐了&lt;a href=&quot;http://www.vox.com/2016/5/23/11704246/wealth-in
    
    </summary>
    
    
      <category term="阅读" scheme="http://foxgem.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>做一个体贴的代码提交人</title>
    <link href="http://foxgem.github.io/2016/05/24/git-commit-message/"/>
    <id>http://foxgem.github.io/2016/05/24/git-commit-message/</id>
    <published>2016-05-24T08:36:08.000Z</published>
    <updated>2016-05-24T12:29:41.000Z</updated>
    
    <content type="html">&lt;p&gt;“不关心git commit message书写的人很有可能不经常用git log”，这句话一语中的。说来惭愧，我们团队的现状就是这样。&lt;/p&gt;
&lt;p&gt;这并不是说我们不重视commit message的书写，但要是跟&lt;a href=&quot;http://chris.beams.io/posts/git-commit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;中提到的标准来比，还是有些距离的。究其原因，我想大概有以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;团队成员相对集中，平时的交流就很紧密，写message的时候就下意识的省略了。&lt;/li&gt;
&lt;li&gt;代码集体所有制，每人并没有固定的功能划分，都会有机会接触他人代码。遇到代码问题，可以随时找到人。&lt;/li&gt;
&lt;li&gt;团队成员相对稳定，业务也都熟悉，代码历史问题能方便的找到相应的人。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;明眼人会很快判断：这是一个小团队。猜的没错，我们的团队不大，但也不小，因为有多个这样的小团队，;)&lt;/p&gt;
&lt;p&gt;当然，我也承认：即使团队再小，沟通的形式还是很重要的，为此我特意在&lt;a href=&quot;https://github.com/shifudao/15mins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;内部培训&lt;/a&gt;中安排了一次关于&lt;a href=&quot;https://github.com/shifudao/15mins/blob/master/issue_ticket该怎么写.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Issue Ticket书写的讨论&lt;/a&gt;。而这篇“How to Write a Git Commit Message”来得恰逢其时，正好可以安排到下次培训。&lt;/p&gt;
&lt;p&gt;好好看看，做个体贴的代码提交人，未来的你会感谢当下的自己。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;“不关心git commit message书写的人很有可能不经常用git log”，这句话一语中的。说来惭愧，我们团队的现状就是这样。&lt;/p&gt;
&lt;p&gt;这并不是说我们不重视commit message的书写，但要是跟&lt;a href=&quot;http://chris.beams.i
    
    </summary>
    
    
      <category term="开发" scheme="http://foxgem.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>关系数据库架构</title>
    <link href="http://foxgem.github.io/2016/05/23/rmdb-arch/"/>
    <id>http://foxgem.github.io/2016/05/23/rmdb-arch/</id>
    <published>2016-05-23T15:08:34.000Z</published>
    <updated>2016-05-24T01:12:15.000Z</updated>
    
    <content type="html">&lt;p&gt;今天从&lt;a href=&quot;https://blog.acolyer.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Morning Paper&lt;/a&gt;上发现一篇关于&lt;a href=&quot;http://db.cs.berkeley.edu/papers/fntdb07-architecture.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;数据库架构&lt;/a&gt;的不错的&lt;a href=&quot;https://blog.acolyer.org/2015/01/20/architecture-of-a-database-system/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;导读&lt;/a&gt;，接下来的几天看看原论文。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天从&lt;a href=&quot;https://blog.acolyer.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Morning Paper&lt;/a&gt;上发现一篇关于&lt;a href=&quot;http://db.cs.berkeley.edu/pape
    
    </summary>
    
    
      <category term="The Morning Paper" scheme="http://foxgem.github.io/tags/The-Morning-Paper/"/>
    
      <category term="数据库" scheme="http://foxgem.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>那些恶意的相似域名（Domain Name Typosquatting）</title>
    <link href="http://foxgem.github.io/2016/05/22/domain-typosquatting/"/>
    <id>http://foxgem.github.io/2016/05/22/domain-typosquatting/</id>
    <published>2016-05-22T09:19:17.000Z</published>
    <updated>2016-05-22T09:55:07.000Z</updated>
    
    <content type="html">&lt;p&gt;原文：&lt;a href=&quot;https://blog.acolyer.org/2016/05/20/the-landscape-of-domain-name-typosquatting-techniques-and-countermeasures/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The landscape of domain name typosquatting: techniques and countermeasures&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;人不是机器，总会犯错，这就给恶意相似域名提供了生存空间。文中提到的实验和数据充分证明了这些域名的“价值”。原本觉得这里面其实也就是钓鱼网站用得比较多，可看了这篇文章之后才知道还有那么多的道道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;广告点击&lt;/li&gt;
&lt;li&gt;勒索&lt;/li&gt;
&lt;li&gt;将用户导向竞争对手&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文中提到的 typosquatting cross-site scripting(TXSS) 更是让人心有余悸，算是给code review又提供了一个很好的理由，;)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;https://blog.acolyer.org/2016/05/20/the-landscape-of-domain-name-typosquatting-techniques-and-countermeasures/&quot; target=&quot;_blan
    
    </summary>
    
    
      <category term="安全" scheme="http://foxgem.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="The Morning Paper" scheme="http://foxgem.github.io/tags/The-Morning-Paper/"/>
    
  </entry>
  
</feed>

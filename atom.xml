<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老胡随手记</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://foxgem.github.io/"/>
  <updated>2016-06-05T10:24:18.000Z</updated>
  <id>http://foxgem.github.io/</id>
  
  <author>
    <name>胡键（jianhgreat@hotmail.com）</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据仓库和BI的敏捷之道</title>
    <link href="http://foxgem.github.io/2016/06/05/agile-dw-bi/"/>
    <id>http://foxgem.github.io/2016/06/05/agile-dw-bi/</id>
    <published>2016-06-05T09:54:13.000Z</published>
    <updated>2016-06-05T10:24:18.000Z</updated>
    
    <content type="html">&lt;p&gt;相比十年前，如今敏捷已是路人皆知。然而，就数据仓库和BI项目来说，却鲜有相关文章涉及。今天&lt;a href=&quot;https://www.thoughtworks.com/insights/blog/agile-data-warehousing-and-business-intelligence-action&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;从Twitter看到的这篇发布在TW网站上的文章&lt;/a&gt;恰好可以补充我这方面的知识盲点。&lt;/p&gt;
&lt;p&gt;下面是我觉得一些有趣的地方（那份仿“敏捷宣言”的“DW/BI系统开发宣言”就算了，:)）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;难度和频率象限，重点关注那些处于“更频繁、难度更高”的用户故事&lt;/li&gt;
&lt;li&gt;项目的推荐目录结构，方便将相关产出纳入版本控制&lt;/li&gt;
&lt;li&gt;通过用户故事推动维度模型的演变&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总得来讲，这篇文章是一份简要的数据仓库和BI项目敏捷实施指南。对于新手可以快速建立起全局观，对于老手则能带来一些新思路，读读还是不错的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;相比十年前，如今敏捷已是路人皆知。然而，就数据仓库和BI项目来说，却鲜有相关文章涉及。今天&lt;a href=&quot;https://www.thoughtworks.com/insights/blog/agile-data-warehousing-and-business-inte
    
    </summary>
    
    
      <category term="数据库" scheme="http://foxgem.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>拒绝低价值的工作</title>
    <link href="http://foxgem.github.io/2016/06/04/no-low-value-work/"/>
    <id>http://foxgem.github.io/2016/06/04/no-low-value-work/</id>
    <published>2016-06-04T11:42:09.000Z</published>
    <updated>2016-06-04T12:54:35.000Z</updated>
    
    <content type="html">&lt;p&gt;如何来衡量工作的“价值”从而方便判断它的高低？我的理解是：影响深远的工作就是有价值的，反之则是无价值或是价值低的。比如，手动部署，就是低价值的；而部署自动化，则是价值高的。因为很明显可以看出后者对开发的影响：把工程师从那些费事费力且容易出错的工作中解放出来，以从事更符合他们&lt;strong&gt;身份&lt;/strong&gt;的工作，:)。显然，从效益上讲，我们应该尽可能的做有价值的工作。&lt;/p&gt;
&lt;p&gt;无独有偶，&lt;a href=&quot;https://hbr.org/2016/06/stop-doing-low-value-work&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇哈佛商业评论上的文章以“停止做低价值的工作”为题讨论了如何提高生产力&lt;/a&gt;。其中的有些观点有点意思：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于经济下滑，工作职位虽然减少了，但工作量却没有。这导致每人的工作量都上升了，于是尽量避免低价值的工作对于职业生涯至关重要。&lt;/li&gt;
&lt;li&gt;当遇到组织重组时，人们会下意识的迎合他人，因为担心被解雇。但其实这是多余的，因为幸存下来的人对组织未来的成功至关重要。&lt;/li&gt;
&lt;li&gt;当完成了众人叫好的工作，乘机要求公司帮忙减少自己低价值的工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于如何避免继续做低价值的工作，除了IT人都知道的自动化大法，本文还给出了其他有益的建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把选择权交给他人来决定价值的高低&lt;/li&gt;
&lt;li&gt;将自己的做事规则公开&lt;/li&gt;
&lt;li&gt;每周自我总结&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，我还想补充一些关于自动化方面的内容。一说起自动化，想当然的会误解只有自己手头重复的工作才值得自动化。但还有一类容易被忽视就是自助类工具。比如，开发人员总会遇到有人找你来看看是不是你负责的那部分代码有问题。若能将整个运行日志（如果有的话）以合适的方式，如ELK，收集和展示出来，相信找你的人会少很多。这种自助类工具带来的效果往往比起仅仅服务于个人的自动化工具更好，因为它节约的是整个组织的多个人的时间。&lt;/p&gt;
&lt;p&gt;最后，作为结尾，我还想说：低价值的工作总得有人做，而且它本身对于人来讲也是相对的。一份工作，对于新人来说，可能是有价值的；但是对于老鸟，则可能不然。单纯地做低价值的工作是低价值的，但在不损伤结果的前提之下，消灭低价值工作，则是有价值的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如何来衡量工作的“价值”从而方便判断它的高低？我的理解是：影响深远的工作就是有价值的，反之则是无价值或是价值低的。比如，手动部署，就是低价值的；而部署自动化，则是价值高的。因为很明显可以看出后者对开发的影响：把工程师从那些费事费力且容易出错的工作中解放出来，以从事更符合他们
    
    </summary>
    
    
      <category term="阅读" scheme="http://foxgem.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>微服务的若干注意事项</title>
    <link href="http://foxgem.github.io/2016/06/03/microservice-pitfall/"/>
    <id>http://foxgem.github.io/2016/06/03/microservice-pitfall/</id>
    <published>2016-06-03T13:13:20.000Z</published>
    <updated>2016-06-03T13:21:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://dzone.com/articles/walking-the-microservices-path-towards-loose-coupl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;列出了若干微服务开发中的注意事项，涉及：共享数据库、安全、服务组合和依赖，给出参考链接也很赞，值得参考，特记之。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://dzone.com/articles/walking-the-microservices-path-towards-loose-coupl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;列出了若干微服务开发
    
    </summary>
    
    
      <category term="微服务" scheme="http://foxgem.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Groovy历史回顾</title>
    <link href="http://foxgem.github.io/2016/06/02/a-groovy-journey/"/>
    <id>http://foxgem.github.io/2016/06/02/a-groovy-journey/</id>
    <published>2016-06-02T13:25:08.000Z</published>
    <updated>2016-06-02T13:58:42.000Z</updated>
    
    <content type="html">&lt;p&gt;今天，Groovy的项目领导者Guillaume Laforge放出了&lt;a href=&quot;https://speakerdeck.com/glaforge/a-groovy-journey-in-open-source-land&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一篇名为“开源世界的Groovy之旅”的幻灯片&lt;/a&gt;，此片堪称“Groovy大事记”，记录了Groovy诞生至今的所有大事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Groovy诞生&lt;/li&gt;
&lt;li&gt;领导层变更&lt;/li&gt;
&lt;li&gt;各类重量级Groovy系开源软件的诞生：Grails、Gradle、Spock……&lt;/li&gt;
&lt;li&gt;Pivotal -&amp;gt; Apache&lt;/li&gt;
&lt;li&gt;各版本的特性&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是一部至今为止最全的Groovy发展史，其中有不少戏剧性的转折，若对Groovy有兴趣，它是非常不错的补充学习材料。同时，关于Groovy，有一段引文被广为流传：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I can honestly say if someone had shown me the Programming in Scala book by by Martin Odersky, Lex Spoon &amp;amp; Bill Venners back in 2003 I’d probably have never created Groovy. - The creator of Groovy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它一直被Scala社区的哥们拿来刷优越感。可事实是，这位Creator严格的说并不是目前Groovy的Creator，他在Groovy 1.0之前很早就离开Groovy项目了。各位可以用自己的大脑来判定这句话的公正性。同时，从&lt;a href=&quot;http://stackoverflow.com/questions/1314732/scala-vs-groovy-vs-clojure&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇StackOverflow的回答&lt;/a&gt;可以看出，这哥们后来也离开了Scala社区，转而给Kotlin贡献代码。&lt;/p&gt;
&lt;p&gt;更具讽刺意味的是：Groovy这几年的TIOBE排名一直在上升，Jenkins 2.0、ElasticSearch、Vert.x等一系列重量级开源软件都支持Groovy。这有理由让人相信Groovy会有一个很好的未来。&lt;/p&gt;
&lt;p&gt;【免责说明：我没有兴趣拿一门语言打压另一个，这只是个人喜好而已。但我同意每年都学习一些新语言，变换一下自己的思维方式。若新语言可以简化工作，那是再好不过了。】&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天，Groovy的项目领导者Guillaume Laforge放出了&lt;a href=&quot;https://speakerdeck.com/glaforge/a-groovy-journey-in-open-source-land&quot; target=&quot;_blank&quot; rel=&quot;e
    
    </summary>
    
    
      <category term="开发" scheme="http://foxgem.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>勿把颠覆当战略</title>
    <link href="http://foxgem.github.io/2016/06/01/disruption-strategy/"/>
    <id>http://foxgem.github.io/2016/06/01/disruption-strategy/</id>
    <published>2016-06-01T13:43:53.000Z</published>
    <updated>2016-06-01T15:19:57.000Z</updated>
    
    <content type="html">&lt;p&gt;在这个万众创业的时代，“颠覆”一词恐怕当属出镜率最高的那一组。技术出身的创业者往往误以为只要拥有了颠覆性的技术，游戏规则就能改变，市场份额唾手可得，公司做大做强那是迟早的事儿。而实际的情况却正如&lt;a href=&quot;http://reactionwheel.net/2016/05/disruption-is-not-a-strategy.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;中指出的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Even outside the life sciences field, new technologies rarely completely change the structure of existing markets, although they often alter them, evolve them, or even create new markets. And at successful companies that did drastically alter a market, the original intent was not usually to “disrupt”, it was to create something new. Google, despite the radical changes it brought to so many markets, set out to create something, not destroy anything. Disruption isn’t everything.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为颠覆而颠覆往往事与愿违，用户是为需求买单，而不是技术。人都有这样的倾向：用擅长的本领来解决任何问题，&lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_the_instrument&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;金锤定律&lt;/a&gt;就是这样的反映。之所以大谈特谈“颠覆”，正是大多数创业者不擅长战略的表现。下面是文章作者从创业者那儿听到“颠覆”一词的反应：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When I hear the word “disruption” what I hear is “I don’t need a strategy” and that’s a huge mistake.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作者给创业者的建议并不新鲜：先生存后发展，每个公司有自己的特色，自己的战略需要自己摸索。关于制定战略时需要考虑的因素，作者给出了下表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;知识产权&lt;/li&gt;
&lt;li&gt;持续改进&lt;/li&gt;
&lt;li&gt;面市时间&lt;/li&gt;
&lt;li&gt;建立联盟&lt;/li&gt;
&lt;li&gt;制造高切换成本&lt;/li&gt;
&lt;li&gt;唯快不破&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但就标题而言，文章并无新意，可文章内容个人觉得还是开阔了眼界和思路。若仅仅只因为标题而放弃阅读本文，实在可惜。&lt;/p&gt;
&lt;p&gt;看完本文，我已决定要抽时间看看&lt;a href=&quot;https://www.amazon.cn/%E5%88%9B%E6%96%B0%E8%80%85%E7%9A%84%E7%AA%98%E5%A2%83-%E5%85%8B%E8%8E%B1%E9%A1%BF%E2%80%A2%E5%85%8B%E9%87%8C%E6%96%AF%E5%9D%A6%E6%A3%AE/dp/B00GTDW848/ref=sr_1_1?ie=UTF8&amp;amp;qid=1464794320&amp;amp;sr=8-1&amp;amp;keywords=%E5%88%9B%E6%96%B0%E8%80%85%E7%9A%84%E7%AA%98%E5%A2%83&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《创新者的窘境》&lt;/a&gt;，不仅仅因为它反复出现这篇文章中，而且还因为这本书被多人推荐过。既然口碑这么好，读读总不会错的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在这个万众创业的时代，“颠覆”一词恐怕当属出镜率最高的那一组。技术出身的创业者往往误以为只要拥有了颠覆性的技术，游戏规则就能改变，市场份额唾手可得，公司做大做强那是迟早的事儿。而实际的情况却正如&lt;a href=&quot;http://reactionwheel.net/2016/0
    
    </summary>
    
    
      <category term="阅读" scheme="http://foxgem.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>一种可伸缩的微服务架构：DRCON</title>
    <link href="http://foxgem.github.io/2016/05/31/drcon/"/>
    <id>http://foxgem.github.io/2016/05/31/drcon/</id>
    <published>2016-05-31T08:53:55.000Z</published>
    <updated>2016-05-31T09:34:03.000Z</updated>
    
    <content type="html">&lt;p&gt;微服务时下正火，Docker是当红炸子鸡，稍微思考一下就能发现：两者结合为可伸缩的架构提供天然的基础，但怎么实现，却没有太多的头绪。直到发现&lt;a href=&quot;https://www.airpair.com/scalable-architecture-with-docker-consul-and-nginx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇旧文&lt;/a&gt;才让我豁然开朗。【各位见谅，虽然名词很早就接触了，真正打算着手开干才是最近的事情。】&lt;/p&gt;
&lt;p&gt;DRCON其实是下列工具的集合：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker，不必过多介绍，略过&lt;/li&gt;
&lt;li&gt;Registrator，可简化服务的注册&lt;/li&gt;
&lt;li&gt;Consul，服务注册和发现&lt;/li&gt;
&lt;li&gt;Consul Template + Nginx，服务的负载均衡和重定向&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务的负载均衡和重定向也可以用SRV-Router来做，这一做法作者在&lt;a href=&quot;http://www.maori.geek.nz/docker_web_services_with_consul/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;另一篇更老的文章&lt;/a&gt;里有介绍。相比起来，这篇文章的做法要更简单一些，就是利用Consul Template在服务启停时自动去修改Nginx的配置文件。&lt;/p&gt;
&lt;p&gt;若采用SRV-Router，务必注意文中提到的小细节：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The srv-router when called will query Consul for home.simple.service.consul, then route to the address and port that is returned. This is the tags namespace in Consul, so each consul service must have the home tag.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我就是没有注意在Consul中要有个home tag，浪费了半天时间。&lt;/p&gt;
&lt;p&gt;最后提一句，与文中用python来实现服务的例子不同，我用的是&lt;a href=&quot;http://vertx.io/docs/#web&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vert.x Web&lt;/a&gt;，;)。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;微服务时下正火，Docker是当红炸子鸡，稍微思考一下就能发现：两者结合为可伸缩的架构提供天然的基础，但怎么实现，却没有太多的头绪。直到发现&lt;a href=&quot;https://www.airpair.com/scalable-architecture-with-docker-
    
    </summary>
    
    
      <category term="微服务" scheme="http://foxgem.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>导致Web应用测试失败的罪魁祸首</title>
    <link href="http://foxgem.github.io/2016/05/30/the-cause-of-breakage-of-web-app/"/>
    <id>http://foxgem.github.io/2016/05/30/the-cause-of-breakage-of-web-app/</id>
    <published>2016-05-30T12:34:24.000Z</published>
    <updated>2016-05-30T13:04:34.000Z</updated>
    
    <content type="html">&lt;p&gt;但凡给Web应用写过自动化功能测试的人都会对这类测试的脆弱性印象深刻，并经常怀疑自己做这件事情的价值。相信我，若没有这样的疑问，那是你写的还不够多，;)&lt;/p&gt;
&lt;p&gt;虽然脆弱，但它却并非一无是处，有时确实能够省掉不少人工，尤其是当UI已经定型并且在可预见的未来很长时间内不会有大的动作时。我猜&lt;a href=&quot;http://martinfowler.com/bliki/TestPyramid.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;测试金字塔&lt;/a&gt;大概就是在这种又爱又恨的情绪下诞生的：很明显，跟UI有关的功能测试是最少的。&lt;/p&gt;
&lt;p&gt;今天，&lt;a href=&quot;https://blog.acolyer.org/2016/05/30/why-do-recordreplay-tests-of-web-applications-break/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Morning Paper上的一篇文章给这类测试的脆弱性提供了理论上的指导&lt;/a&gt;，细节大家就上网站上自己看吧，结论是大家基本都很清楚的：导致Web应用功能测试失败的最大原因是测试中用到的定位符。这也难怪，人就是喜新厌旧的动物，再好看的UI看久了都会有审美疲劳。于是，改头换面自然就成了寻常事，这种背景下原来的测试用得上才怪。&lt;/p&gt;
&lt;p&gt;我也是懒人，也不主张花很大代价去完成一个100%覆盖的功能测试。我更倾向于尽可能大面积覆盖较为稳定的非GUI测试（单元测试和集成测试），严格验证跟GUI交互的接口，最好能在无界面的前提之下就能验证功能流程的流转。至于GUI，则口子放的开一点，方便它们随时调整布局和设计。&lt;/p&gt;
&lt;p&gt;最后又到广告时间，对于Web的功能测试，我推荐&lt;a href=&quot;http://www.gebish.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Geb&lt;/a&gt;，它基于&lt;a href=&quot;http://docs.seleniumhq.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Selenium&lt;/a&gt;，同时又支持&lt;a href=&quot;http://spockframework.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spock&lt;/a&gt;，而且还有&lt;a href=&quot;https://grails.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Grails&lt;/a&gt;的插件，非常的方便易用。我之前在老东家SAP时还专门让人用它做了一个小的测试工具，效果还不错，;)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;但凡给Web应用写过自动化功能测试的人都会对这类测试的脆弱性印象深刻，并经常怀疑自己做这件事情的价值。相信我，若没有这样的疑问，那是你写的还不够多，;)&lt;/p&gt;
&lt;p&gt;虽然脆弱，但它却并非一无是处，有时确实能够省掉不少人工，尤其是当UI已经定型并且在可预见的未来很长时间内不
    
    </summary>
    
    
      <category term="开发" scheme="http://foxgem.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="The Morning Paper" scheme="http://foxgem.github.io/tags/The-Morning-Paper/"/>
    
  </entry>
  
  <entry>
    <title>不编码的（Codeless）程序员</title>
    <link href="http://foxgem.github.io/2016/05/29/codeless/"/>
    <id>http://foxgem.github.io/2016/05/29/codeless/</id>
    <published>2016-05-29T13:17:52.000Z</published>
    <updated>2016-05-29T13:28:44.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://dzone.com/articles/the-codeless-developer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DZone有篇调侃Serverless的漫画&lt;/a&gt;：一位简历上写着具备有Serverless和NoDB技能的开发者度过无所事事的上班时间之后，在下班点高高兴兴的回家了。&lt;/p&gt;
&lt;p&gt;不写代码，自然也是“Serverless”，;)&lt;/p&gt;
&lt;p&gt;免责声明：各位勿怪，其实我还想抽时间了解一下Serverless呢。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://dzone.com/articles/the-codeless-developer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DZone有篇调侃Serverless的漫画&lt;/a&gt;：一位简历上写着具备有Serverles
    
    </summary>
    
    
      <category term="阅读" scheme="http://foxgem.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>To Do List + Break List = 劳逸结合</title>
    <link href="http://foxgem.github.io/2016/05/28/break-list/"/>
    <id>http://foxgem.github.io/2016/05/28/break-list/</id>
    <published>2016-05-28T10:53:05.000Z</published>
    <updated>2016-05-28T11:31:48.000Z</updated>
    
    <content type="html">&lt;p&gt;关于&lt;a href=&quot;https://en.wikipedia.org/wiki/Getting_Things_Done&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GTD&lt;/a&gt;的文章永远不会嫌太多，这是&lt;a href=&quot;http://lifehacker.com/swap-your-to-do-list-for-a-break-list-to-get-more-don-1774565496&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;另一篇发布在LifeHacker上的同类题材的文章&lt;/a&gt;。与那些专注于“如何完成任务的学问”的文章不同，它介绍的是工作的另一面：如何休息的艺术。&lt;/p&gt;
&lt;p&gt;就其整体思想而言，跟番茄工作法有几许相似：都主张工作和休息相结合，避免过渡操劳；不同于采用结构化“工作-休息”循环的番茄工作法，这篇文章介绍的劳逸结合方式颇为随意：列出一个跟To Do List并列的Break List，每次休息完，就划掉一项。至于什么时候休息，it’s up to you！Break List和To Do List的关系就像阴和阳一样，既对立，又统一。&lt;/p&gt;
&lt;p&gt;我很喜欢这篇文章表达的一个观点：过犹不及，不论是工作还是休息，都需要管理。过渡工作，身体吃不消；过渡休息，事情就被耽误。&lt;/p&gt;
&lt;p&gt;同时，对于这种由你自己（而不是番茄钟）说了算的劳逸结合方式，我个人觉得可操作性更强一些。毕竟，你很难要求跟你一起工作的人完全按照你的（番茄）工作节奏来，除非工作环境具备这一要求。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;关于&lt;a href=&quot;https://en.wikipedia.org/wiki/Getting_Things_Done&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GTD&lt;/a&gt;的文章永远不会嫌太多，这是&lt;a href=&quot;http://lifehack
    
    </summary>
    
    
      <category term="阅读" scheme="http://foxgem.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>2016年最受欢迎的前100 Java开发库</title>
    <link href="http://foxgem.github.io/2016/05/27/top-100-java-libs-in-2016/"/>
    <id>http://foxgem.github.io/2016/05/27/top-100-java-libs-in-2016/</id>
    <published>2016-05-27T12:26:55.000Z</published>
    <updated>2016-05-27T13:08:21.000Z</updated>
    
    <content type="html">&lt;p&gt;说实话，文章有点标题党的味道，:)。按照&lt;a href=&quot;https://dzone.com/articles/the-top-100-java-libraries-in-2016-after-analyzing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;解释的数据获取方法，更准确的说法应该是“GitHub 2016年最受欢迎的Top 100 Java libs”。不过鉴于GitHub在开发界的地位，标题写成这样也不算太过分。&lt;/p&gt;
&lt;p&gt;根据这些数据做出的图表，很容易看出来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试类工具比重不少，是否可以得出结论自动化测试已经深入人心？&lt;/li&gt;
&lt;li&gt;JUnit和Spring在Java生态中的地位依旧牢不可破&lt;/li&gt;
&lt;li&gt;日志大部分采用的是slf4j + slf4j-log12&lt;/li&gt;
&lt;li&gt;用Java做游戏的真不多，比起用它来做Web的差远了&lt;/li&gt;
&lt;li&gt;Parsing类的工具比重虽大，但其实多是用于对JSON和XML的解析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最有趣的是，JVM上的动态语言&lt;a href=&quot;http://www.groovy-lang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Groovy&lt;/a&gt;也被纳入在内，作为Java库（org.codehaus.groovy.groovy-all）。作为一个资深Groovy用户，我可以负责任地说，自从用上Groovy，省掉了很多工具选择的烦恼，如JSON和XML的解析。&lt;/p&gt;
&lt;p&gt;而且，我也很高兴的看到Groovy的流行度逐年上升，并于2016年5月TIOBE的语言榜中排第17位。套句广告词：Groovy，谁用谁知道！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;说实话，文章有点标题党的味道，:)。按照&lt;a href=&quot;https://dzone.com/articles/the-top-100-java-libraries-in-2016-after-analyzing&quot; target=&quot;_blank&quot; rel=&quot;external
    
    </summary>
    
    
      <category term="开发" scheme="http://foxgem.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Vert.x技巧：使用EventBus Interceptor拦截消息</title>
    <link href="http://foxgem.github.io/2016/05/26/vertx-eventbus-interceptor/"/>
    <id>http://foxgem.github.io/2016/05/26/vertx-eventbus-interceptor/</id>
    <published>2016-05-26T10:58:38.000Z</published>
    <updated>2016-05-26T11:17:12.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://vertx.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vert.x&lt;/a&gt;用久了肯定有这样的想法：拦截EventBus上发送的所有消息。这个需求用Vertx EventBus Interceptor可以非常简单的实现，可惜的是，&lt;a href=&quot;http://vertx.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vert.x文档&lt;/a&gt;却并没有明确的指出来。&lt;/p&gt;
&lt;p&gt;其实它的使用很简单，直接看代码吧（Groovy代码）：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vertx.eventBus().addInterceptor &amp;#123; sendContext -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Message message = sendContext.message()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 自由发挥……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sendContext.next()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后的那句 &lt;strong&gt;sendContext.next()&lt;/strong&gt; 非常关键：如果没写，后续的consumer将无法收到刚刚被你拦截的消息！所以，一定要确保你是&lt;strong&gt;有意&lt;/strong&gt;不写的。&lt;/p&gt;
&lt;p&gt;其他的就没什么可说得了，基本跟其他工具提供的拦截器的功能类似，查查API文档，看看代码，都能搞清楚。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://vertx.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vert.x&lt;/a&gt;用久了肯定有这样的想法：拦截EventBus上发送的所有消息。这个需求用Vertx EventBus Interceptor可以非常简单的
    
    </summary>
    
    
      <category term="开发" scheme="http://foxgem.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>贫富差距为何会越来越大？</title>
    <link href="http://foxgem.github.io/2016/05/25/rich-and-poor/"/>
    <id>http://foxgem.github.io/2016/05/25/rich-and-poor/</id>
    <published>2016-05-25T12:30:26.000Z</published>
    <updated>2016-05-25T13:10:17.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://getpocket.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pocket&lt;/a&gt;今天给我推荐了&lt;a href=&quot;http://www.vox.com/2016/5/23/11704246/wealth-inequality-cartoon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇解释贫富差距缘何越来越大的漫画&lt;/a&gt;，当然，考察对象是美帝。&lt;/p&gt;
&lt;p&gt;作为IT男，我对于这部分知识的薄弱是可想而知的，本着谦虚好学兼工作之余消遣的想法，这篇文章成了饭后的阅读。粗粗看完之后，形成了下面的认识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;富人赚钱主要靠投资【另一句经常听到的话就是：你不理财，财不理你】&lt;/li&gt;
&lt;li&gt;工会能帮助工人赚的更多，反之亦然。&lt;/li&gt;
&lt;li&gt;教育水平决定工资水平，即：博士 &amp;gt; 硕士 &amp;gt; 学士 &amp;gt; 高中。原因在于：技术进步减少了体力劳动的相应岗位，脑力劳动会越来越吃香。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，文中还提出了其他原因，如税率政策和部分人工资的待遇变化，但以上三点是给我印象最深的。此外，文中提到关于收入不平等的最大危害在于：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But perhaps the best argument against income inequality, though, is that it’s a threat to democracy. If a few people control most of the money, then they can control political outcomes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于这一点，作为拥有5000年历史我们，应该不难理解吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://getpocket.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pocket&lt;/a&gt;今天给我推荐了&lt;a href=&quot;http://www.vox.com/2016/5/23/11704246/wealth-in
    
    </summary>
    
    
      <category term="阅读" scheme="http://foxgem.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>做一个体贴的代码提交人</title>
    <link href="http://foxgem.github.io/2016/05/24/git-commit-message/"/>
    <id>http://foxgem.github.io/2016/05/24/git-commit-message/</id>
    <published>2016-05-24T08:36:08.000Z</published>
    <updated>2016-05-24T12:29:41.000Z</updated>
    
    <content type="html">&lt;p&gt;“不关心git commit message书写的人很有可能不经常用git log”，这句话一语中的。说来惭愧，我们团队的现状就是这样。&lt;/p&gt;
&lt;p&gt;这并不是说我们不重视commit message的书写，但要是跟&lt;a href=&quot;http://chris.beams.io/posts/git-commit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;中提到的标准来比，还是有些距离的。究其原因，我想大概有以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;团队成员相对集中，平时的交流就很紧密，写message的时候就下意识的省略了。&lt;/li&gt;
&lt;li&gt;代码集体所有制，每人并没有固定的功能划分，都会有机会接触他人代码。遇到代码问题，可以随时找到人。&lt;/li&gt;
&lt;li&gt;团队成员相对稳定，业务也都熟悉，代码历史问题能方便的找到相应的人。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;明眼人会很快判断：这是一个小团队。猜的没错，我们的团队不大，但也不小，因为有多个这样的小团队，;)&lt;/p&gt;
&lt;p&gt;当然，我也承认：即使团队再小，沟通的形式还是很重要的，为此我特意在&lt;a href=&quot;https://github.com/shifudao/15mins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;内部培训&lt;/a&gt;中安排了一次关于&lt;a href=&quot;https://github.com/shifudao/15mins/blob/master/issue_ticket该怎么写.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Issue Ticket书写的讨论&lt;/a&gt;。而这篇“How to Write a Git Commit Message”来得恰逢其时，正好可以安排到下次培训。&lt;/p&gt;
&lt;p&gt;好好看看，做个体贴的代码提交人，未来的你会感谢当下的自己。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;“不关心git commit message书写的人很有可能不经常用git log”，这句话一语中的。说来惭愧，我们团队的现状就是这样。&lt;/p&gt;
&lt;p&gt;这并不是说我们不重视commit message的书写，但要是跟&lt;a href=&quot;http://chris.beams.i
    
    </summary>
    
    
      <category term="开发" scheme="http://foxgem.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>关系数据库架构</title>
    <link href="http://foxgem.github.io/2016/05/23/rmdb-arch/"/>
    <id>http://foxgem.github.io/2016/05/23/rmdb-arch/</id>
    <published>2016-05-23T15:08:34.000Z</published>
    <updated>2016-05-24T01:12:15.000Z</updated>
    
    <content type="html">&lt;p&gt;今天从&lt;a href=&quot;https://blog.acolyer.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Morning Paper&lt;/a&gt;上发现一篇关于&lt;a href=&quot;http://db.cs.berkeley.edu/papers/fntdb07-architecture.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;数据库架构&lt;/a&gt;的不错的&lt;a href=&quot;https://blog.acolyer.org/2015/01/20/architecture-of-a-database-system/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;导读&lt;/a&gt;，接下来的几天看看原论文。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天从&lt;a href=&quot;https://blog.acolyer.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Morning Paper&lt;/a&gt;上发现一篇关于&lt;a href=&quot;http://db.cs.berkeley.edu/pape
    
    </summary>
    
    
      <category term="数据库" scheme="http://foxgem.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="The Morning Paper" scheme="http://foxgem.github.io/tags/The-Morning-Paper/"/>
    
  </entry>
  
  <entry>
    <title>那些恶意的相似域名（Domain Name Typosquatting）</title>
    <link href="http://foxgem.github.io/2016/05/22/domain-typosquatting/"/>
    <id>http://foxgem.github.io/2016/05/22/domain-typosquatting/</id>
    <published>2016-05-22T09:19:17.000Z</published>
    <updated>2016-05-22T09:55:07.000Z</updated>
    
    <content type="html">&lt;p&gt;原文：&lt;a href=&quot;https://blog.acolyer.org/2016/05/20/the-landscape-of-domain-name-typosquatting-techniques-and-countermeasures/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The landscape of domain name typosquatting: techniques and countermeasures&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;人不是机器，总会犯错，这就给恶意相似域名提供了生存空间。文中提到的实验和数据充分证明了这些域名的“价值”。原本觉得这里面其实也就是钓鱼网站用得比较多，可看了这篇文章之后才知道还有那么多的道道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;广告点击&lt;/li&gt;
&lt;li&gt;勒索&lt;/li&gt;
&lt;li&gt;将用户导向竞争对手&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文中提到的 typosquatting cross-site scripting(TXSS) 更是让人心有余悸，算是给code review又提供了一个很好的理由，;)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;https://blog.acolyer.org/2016/05/20/the-landscape-of-domain-name-typosquatting-techniques-and-countermeasures/&quot; target=&quot;_blan
    
    </summary>
    
    
      <category term="安全" scheme="http://foxgem.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="The Morning Paper" scheme="http://foxgem.github.io/tags/The-Morning-Paper/"/>
    
  </entry>
  
</feed>
